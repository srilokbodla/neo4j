#cipher script for creating, quering nodes

# three nodes are codes with label user with id property

create (:user{id:'one'}), (:user{id:'two'}), (:user{id:'three'})

#adding unique constraint to property id

CREATE CONSTRAINT ON (a:user) ASSERT a.id IS UNIQUE

#adding 'follows'  relationships with nodes

match (a:user{id:'one'}),(b:user{id:'two'}) create (a)-[:follows]->(b)
match (a:user{id:'one'}),(b:user{id:'two'}) create (b)-[:follows]->(a)
match (a:user{id:'one'}),(b:user{id:'three'}) create (a)-[:follows]->(b)
match (a:user{id:'one'}),(b:user{id:'three'}) create (b)-[:follows]->(a)
match (a:user{id:'two'}),(b:user{id:'three'}) create (a)-[:follows]->(b)

# as a result three nodes and five relations are created

# count no.of pairs of users such that two users in a pair follows each other

match (a:user})-[relation1:follows]->(b:user)-[relation2:follows]->(a) return count(relation1)

#above query will result answer 4 

# For example a follows b and b follows a, if above query is executed it will return two pairs (a,b) and (b,a).
# To avoid above situation following condition is to be added in above query

match (a:user})-[relation1:follows]->(b:user)-[relation2:follows]->(a) where a.id < b.id return count(relation1)

# This query result answer 2
# This query also avoid self referencing case like a follows a. i.e (a,a) is not returned by query
